name: "Run unit tests"

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches:
      - dev
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    branches:
      - dev

env:
  TargetNetNext: True

jobs:
  build:
    runs-on: windows-latest
    continue-on-error: false

    name: "Build and run unit tests"
    steps:
    - name: Set git core.longpaths flag
      run: |
          git config --system core.longpaths true

    - name: Checkout repository
      uses: actions/checkout@v4.1.1
        
    - name: Setup .NET 9.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x

    - name: Strong name bypass
      run: |
          regedit /s .\build\strongNameBypass.reg

    - name: Run the tests
      run: dotnet test Wilson.sln --collect:"XPlat Code Coverage" --settings:./build/CodeCoverage.runsettings

    - name: Create code coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool --version 5.4.1
        reportgenerator -reports:./**/coverage.cobertura.xml -targetdir:CodeCoverage -reporttypes:'MarkdownSummaryGithub;Cobertura' -filefilters:'+src/**/*.cs'

    - name: Write coverage to job summary
      shell: bash
      run: |
        cat CodeCoverage/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
        echo "COMMENT_CONTENT_ENV_VAR<<EOF" >> $GITHUB_ENV
        echo $(cat CodeCoverage/SummaryGithub.md) >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Comment coverage in PR
      uses: actions/github-script@v7
      id: comment
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: process.env.COMMENT_CONTENT_ENV_VAR
          })

    # Run baseline package validation
    - name: Pack
      run: dotnet pack Product.proj --no-restore --no-build
